plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.ams'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-messaging'
	implementation 'org.springframework.security:spring-security-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'edu.ksu.canvas:canvas-api:2.0.0'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task cleanStatic(type: Delete) {
	delete 'src/main/resources/static'
}

task buildFrontend(type: Exec) {
	doLast {
		workingDir 'src/frontend'
		print "Building frontend... "
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			println "(Windows)"
			commandLine 'npm.cmd', 'run', 'build'
		} else { // assume UNIX
			println "(Unix)"
			commandLine 'npm', 'run', 'build'
		}
	}
}

task setupFrontend(type: Exec) {
	doLast {
		workingDir 'src/frontend'
		print "Installing frontend dependencies... "
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			println "(Windows)"
			commandLine 'npm.cmd', 'install'
		} else { // assume UNIX
			println "(Unix)"
			commandLine 'npm', 'install'
		}
	}
}

task copyFrontendBuildToResources(type: Copy) {
	dependsOn cleanStatic
	from 'src/frontend/out'
	into 'src/main/resources/static'
}

task exportFrontend {
	dependsOn buildFrontend
	dependsOn copyFrontendBuildToResources
}

processResources {
	dependsOn copyFrontendBuildToResources
}

// Configure bootRun to depend on frontend tasks
/*bootRun {
	dependsOn buildFrontend
	dependsOn copyFrontendBuildToResources
}

build.dependsOn buildFrontend, copyFrontendBuildToResources*/

tasks.named('test') {
	useJUnitPlatform()
}
